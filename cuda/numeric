//
// Created by egi on 1/26/20.
//

#ifndef LIBCUPP_PROPOSAL_NUMERIC_H
#define LIBCUPP_PROPOSAL_NUMERIC_H

#include "detail/__reduce"

namespace cuda {

enum thread_scope {
  thread_scope_system,
  thread_scope_device,
  thread_scope_block,
  thread_scope_warp
};

template<typename _Tp, typename _ReducePolicy = typename std::conditional<std::is_same<int, _Tp>::value,
                                                                          __warp_shfl_reduce<_Tp>,
                                                                          __warp_shrd_reduce<_Tp>>::type>
class warp_reduce : public _ReducePolicy {
public:
  using _ReducePolicy::_ReducePolicy;

  template<thread_scope=thread_scope_warp, typename _RandomAccessIterator, typename _BinaryOperation>
  __device__ inline _Tp
  operator ()(_RandomAccessIterator __first, _RandomAccessIterator __last, _Tp __init, _BinaryOperation __binary_op)
  {
    for (__first += lane_id(); __first < __last; __first += warpSize)
      __init = __binary_op (__init, *__first);
    return __reduce_value (__init, __binary_op);
  }
};

}

#endif //LIBCUPP_PROPOSAL_NUMERIC_H
